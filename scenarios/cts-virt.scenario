# CTS in virtualized environment 

#################################
# Scenario Requirements Section #
#################################
= REQUIREMENTS =
nodes=3
floating_ips=1
#install_local=1
packages=pacemaker pacemaker-remote pacemaker-cts corosync pcs resource-agents systemd-python 
cluster_init=1

######################
# Deployment Scripts #
######################
= SCRIPTS =

##
# Verify the node driving this scenario is outside of the cluster
##
target=local
....
nodename=$(crm_node -n)
for node in $(echo $PHD_ENV_nodes); do
	if [ "$HOSTNAME" = "node" ]; then
		echo "Must run the virt cts scenario on a node outside of the cluster"
		exit 1
	fi
done

exit 0
....


##
# Make sure pacemaker is not enabled on bootup
##
target=all
....
systemctl disable pacemaker
systemctl disable corosync
chkconfig pacemaker off
chkconfig corosync off
exit 0
....

##
# determine if fence_xvm is setup on all nodes
##
target=all
....
wget https://raw.githubusercontent.com/davidvossel/phd/master/tools/fence_phd_kvm
chmod 755 fence_phd_kvm
mv fence_phd_kvm /usr/sbin

echo "Checking to make sure fence_xvm is reachable"
fence_phd_kvm -o list
....

##
# Launch CTS
##
target=local
....
stack="mcp"
yum list installed | grep cman
if [ $? -eq 0 ]; then
	stack="cman"
fi

rm -f /var/log/cts.log

/usr/share/pacemaker/tests/cts/CTSlab.py --outputfile /var/log/cts.log --nodes "$PHD_ENV_nodes" -r --stonith "phd" -c --test-ip-base "$PHD_ENV_floating_ips1" --stack "$stack" --at-boot 0 500
....
