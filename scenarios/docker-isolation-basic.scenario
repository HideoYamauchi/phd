# Example docker container management scenario

#################################
# Scenario Requirements Section #
#################################
= REQUIREMENTS =
nodes=2
packages=pacemaker corosync pcs docker
cluster_init=1

######################
# Deployment Scripts #
######################
= SCRIPTS =

##
# cleanup anything left over from previous run
##
target=all
....
# make sure docker services are up
service docker start

# clean up previous containers and images
for item in $(docker ps -a | awk '{print $1}' | grep -v "CONTAINER"); do docker stop $item; docker rm $item; done
docker rmi centos:isolation > /dev/null 2>&1
rm -rf Dockerfile rpms
....

##
# Make docker images on both nodes for apache.
##
target=all
....
from="centos:centos7"
to="centos:isolation"

docker pull "$from"
if [ $? -ne 0 ]; then
	echo "ERROR: failed to pull docker image $from"
	exit 1
fi

# Create Dockerfile for image creation.
echo "FROM $from" > Dockerfile
if [ -d "/$HOME/phd_state/phd_scenario/phd_rpms" ]; then
	rm -rf rpms
	mkdir rpms
	echo "ADD /rpms /root/" >> Dockerfile
	echo "RUN yum install -y /root/*.rpm" >> Dockerfile
	cp /$HOME/phd_state/phd_scenario/phd_rpms/* rpms/
else
	echo "RUN yum install -y pacemaker pacemaker-remote resource-agents" >> Dockerfile
fi

# build new image with apache in it from our base image.
docker build -t "$to" .
if [ $? -ne 0 ]; then
	echo "ERROR: failed to generate docker image"
	exit 1
fi

# cleanup
rm -rf Dockerfile rpms
....

##
# Make a simple isolated resource
##
target=$PHD_ENV_nodes1
....
# single isolated resource.
pcs resource create single Dummy pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --force

# cloned isolated resource
pcs resource create cloned Dummy pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --clone --force

# group of isolated resources
pcs resource create g1 Dummy pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --group  mygroup --force
pcs resource create g2 Dummy pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --group  mygroup --force

# multistate isolated resources with access to attrd via ipc proxy
pcs resource create mastered Stateful pcmk_docker_privileged=true pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --master --force

# cloned group of isolated resources.
cibadmin -Q > tmp
pcs -f tmp resource create cg1 Dummy pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --group  myclonedgroup --force
pcs -f tmp resource create cg2 Dummy pcmk_docker_image=centos:isolation op start timeout=120s op stop timeout=90s --group  myclonedgroup --force
pcs -f tmp resource clone myclonedgroup
cibadmin --replace --xml-file tmp


# group is container running multiple resources in it... TODO figure out a way to configure this without requiring pcs changes.
rm -f group_is_container.cib
# group is an isolated resource.
cat << END >> group_is_container.cib
<group id="group_is_container">
  <instance_attributes id="group-is-instance_attributes">
    <nvpair id="group-is-instance_attributes-docker_image" name="pcmk_docker_image" value="centos:isolation"/>
  </instance_attributes>
  <primitive class="ocf" id="s1" provider="heartbeat" type="Dummy">
    <instance_attributes id="s1-instance_attributes"/>
    <operations>
        <op id="s1-start-interval-0s" interval="0s" name="start" timeout="120"/>
        <op id="s1-stop-interval-0s" interval="0s" name="stop" timeout="90"/>
        <op id="s1-monitor-interval-10" interval="10" name="monitor" timeout="20"/>
    </operations>
  </primitive>
  <primitive class="ocf" id="s2" provider="heartbeat" type="Dummy">
    <instance_attributes id="s2-instance_attributes"/>
    <operations>
        <op id="s2-start-interval-0s" interval="0s" name="start" timeout="20"/>
        <op id="s2-stop-interval-0s" interval="0s" name="stop" timeout="20"/>
        <op id="s2-monitor-interval-10" interval="10" name="monitor" timeout="20"/>
    </operations>
  </primitive>
  <meta_attributes id="group_is_container-meta_attributes"/>
</group>
END
cibadmin -o resources -Mc -x group_is_container.cib

#clone of group is container
rm -f clone_group_is_container.cib
cat << END >> clone_group_is_container.cib
<clone id="group_is_container_clone">
<group id="group_is_container2">
  <instance_attributes id="clone-group-is-instance_attributes">
    <nvpair id="clone-group-is-instance_attributes-docker_image" name="pcmk_docker_image" value="centos:isolation"/>
  </instance_attributes>
  <primitive class="ocf" id="gs1" provider="heartbeat" type="Dummy">
    <instance_attributes id="gs1-instance_attributes"/>
    <operations>
        <op id="gs1-start-interval-0s" interval="0s" name="start" timeout="120"/>
        <op id="gs1-stop-interval-0s" interval="0s" name="stop" timeout="90"/>
        <op id="gs1-monitor-interval-10" interval="10" name="monitor" timeout="20"/>
    </operations>
  </primitive>
  <primitive class="ocf" id="gs2" provider="heartbeat" type="Dummy">
    <instance_attributes id="gs2-instance_attributes"/>
    <operations>
        <op id="gs2-start-interval-0s" interval="0s" name="start" timeout="20"/>
        <op id="gs2-stop-interval-0s" interval="0s" name="stop" timeout="20"/>
        <op id="gs2-monitor-interval-10" interval="10" name="monitor" timeout="20"/>
    </operations>
  </primitive>
  <meta_attributes id="clone_group_is_container-meta_attributes"/>
</group>
</clone>
END
cibadmin -o resources -Mc -x clone_group_is_container.cib

#phd_rsc_verify_start_all 60
....

