#!/bin/bash

if [ -z "$PHDCONST_ROOT" ]; then
	PHDCONST_ROOT="@libexecdir@/phd"
fi

# Location of current scenario data
exec_dir="@localstatedir@/lib/phd"
definition="@sysconfdir@/phd/cluster_definition.conf"
scenario_dir="@libexecdir@/@PACKAGE@/scenarios"

. ${PHDCONST_ROOT}/lib/transport_ssh.sh
. ${PHDCONST_ROOT}/lib/phd_utils_api.sh
. ${PHDCONST_ROOT}/lib/scenario_engine.sh
. ${PHDCONST_ROOT}/lib/definition.sh


function helptext() {
	echo "==========================================================="
	echo "phd_exec - A tool for executing pacemaker cluster scenarios"
	echo "==========================================================="
	echo ""
	echo "Usage: phd_exec -s <scenario_file> [options]"
	echo "The default behavior when only the scenario file is provided"
	echo "is to execute the scenario deployment on the cluster definition"
	echo "configured in the $defintion file"
	echo ""
	echo "Options"
	echo "-p, --print-env          Print cluster definition environment variables"
	echo "-s, --scenario           Scenario file name."
	echo "-l, --list-scenarios     List installed scenario files."
	echo "-d, --definition         Custom definition file location. Defaults to $definition"
	echo "-v, --verify-definition  Verify cluster definition can run the scenario file"
	echo "-t, --run-tests          Deploy scenario and run scenario tests after deployment."
	echo "-o, --run-tests-only     Only run tests on deployment." 
	echo "-f, --log-file           Custom logfile location."
	echo "-L, --log-level-stdout   Log level 0-4. The higher the level, the more output."
	echo "-q, --quiet              Keep stdout quiet."
	echo ""
	exit $1
}

print_env=0
check_only=0
tests=0
log_file="$exec_dir/phd.log"
only_tests=0
while true ; do
	case "$1" in
	--help|-h|-\?) helptext 0;;
	-p|--print-env) print_env=1; shift;;
	-v|--verify)     check_only=1; shift;;
	-t|--run-tests)  tests=1; shift;;
	-o|--run-tests-only)  only_tests=1; shift;;
	-f|--log-file)  log_file=$2; shift; shift;;
	-d|--definition)  definition=$2; shift; shift;;
	-s|--scenario)  scenario=$2; shift; shift;;
	-l|--list-scenarios) ls -1 $scenario_dir
		exit 0;;
	-L|--log-level-stdout) phd_set_log_level $2; shift; shift;;
	-q|--quiet) phd_enable_stdout_log 0; shift;;
	"") break;;
	*) helptext 1;;
	esac
done

phd_set_log_file "$log_file"
phd_set_exec_dir "$exec_dir/phd_scenario"
definition_unpack $definition

if [ -z "$scenario" ]; then
	echo "Error: Must provide valid scenario file."
	echo ""
	helptext 1
fi

# Attempt to locate scenario file
if [ ! -e "$scenario" ]; then
	scenario="$scenario_dir/$scenario" 
	if [ ! -e "$scenario" ]; then
		scenario="${scenario}.scenario"
		if [ ! -e "$scenario" ]; then
			echo "Error: Can not find specified scenario file"
			exit 1
		fi
	fi
fi

scenario_unpack $scenario
if [ $print_env -eq 1 ]; then
	print_definition
	print_scenario
	exit 0
fi
if [ $check_only -eq 1 ]; then
	scenario_verify
	echo "Success"
	exit 0
fi

if [ $only_tests -eq 1 ]; then
	scenario_exec_tests
	exit $?
fi

scenario_exec
if [ $tests -eq 1 ]; then
	scenario_exec_tests
fi
