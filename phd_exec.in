#!/bin/bash

if [ -z "$PHDCONST_ROOT" ]; then
	PHDCONST_ROOT="@libexecdir@/phd"
fi

# Location of current scenario data
exec_dir="@localstatedir@/lib/phd"

. ${PHDCONST_ROOT}/lib/transport_ssh.sh
. ${PHDCONST_ROOT}/lib/phd_utils_api.sh
. ${PHDCONST_ROOT}/lib/scenario_engine.sh
. ${PHDCONST_ROOT}/lib/definition.sh


function helptext() {
	echo "==========================================================="
	echo "phd_exec - A tool for executing pacemaker cluster scenarios"
	echo "==========================================================="
	echo ""
	echo "Usage: phd_exec <cluster definition> <scenario file> [options]"
	echo "The default behavior when no options are specified is to execute"
	echo "The scenario file on the given cluster definition"
	echo ""
	echo "Options"
	echo "-p, --print-env          Print cluster definition environment variables"
	echo "-v, --verify-definition  Verify cluster definition can run the scenario file"
	echo "-t, --run-tests          Run scenario tests after deployment"
	echo "-l, --log-file           Custom logfile location."
	echo "-L, --log-level-stdout   Log level 0-4. The higher the level, the more output."
	echo "-q, --quiet              Keep stdout quiet."
	echo ""
	exit $1
}

definition=$1
shift
scenario=$1
shift

if [ -z "$scenario" ]; then
	echo "Error: Must provide valid cluster definition and scenario file"
	echo ""
	helptext 1
fi

print_env=0
check_only=0
tests=0
log_file="$exec_dir/phd.log"
while true ; do
	case "$1" in
	--help|-h|-\?) helptext 0;;
	-p|--print-env) print_env=1; shift;;
	-v|--verify)     check_only=1; shift;;
	-t|--run-tests)  tests=1; shift;;
	-l|--log-file)  log_file=$2; shift; shift;;
	-L|--log-level-stdout) phd_set_log_level $2; shift; shift;;
	-q|--quiet) phd_enable_stdout_log 0; shift;;
	"") break;;
	*) helptext 1;;
	esac
done

phd_set_log_file "$log_file"
phd_set_exec_dir "$exec_dir/phd_scenario"

definition_unpack $definition
scenario_unpack $scenario

if [ $print_env -eq 1 ]; then
	print_definition
	print_scenario
	exit 0
fi

if [ $check_only -eq 1 ]; then
	scenario_verify
	echo "Success"
	exit 0
fi

scenario_exec

if [ $tests -eq 1 ]; then
	scenario_exec_tests
fi
