#!/bin/bash
#
# Copyright (c) 2014 David Vossel <dvossel@redhat.com>
#					All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#######################################################################

mkdir -p /var/run/docker_cts_jobs/

fork_job()
{
	local pid=$1

	echo "\n== NEW JOB ===="

	srcnode="$(cat /var/run/docker_cts_jobs/docker_remote_NODE${pid})"
	args="$(cat /var/run/docker_cts_jobs/docker_remote_ARGS${pid})"

	stdoutfile="/var/run/docker_cts_jobs/$pid.docker_remote.stdout"
	stderrfile="/var/run/docker_cts_jobs/$pid.docker_remote.stderr"
	rcfile="/var/run/docker_cts_jobs/$pid.docker_remote.rc"
	echo "PROCESSING REQUEST: on $srcnode run $args"

	echo "$args" | nsenter --target $(docker inspect --format {{.State.Pid}} ${srcnode}) --mount --uts --ipc --net --pid > $stdoutfile 2> $stderrfile
	rc=$?
	echo "$rc" > $rcfile
	echo "DONE exit code = $rc"

	# signal pid to check stdout stderr and rc files for results
	kill -SIGUSR1 $pid
}

check_job()
{
	local job=$(ls /var/run/docker_cts_jobs/* 2>/dev/null | grep -m 1 docker_remote_JOB*)
	if [ -z "$job" ]; then
		return 1
	fi

	pid=$(cat $job)
	if [ -z "$pid" ]; then
		rm -f $job
		return 1
	fi

	# remove job.
	rm -f $job

	fork_job "$pid" &
	
	return 0
}

while true; do
	check_job
	if [ $? -eq 1 ]; then
		usleep 100000
	fi
done
