#!/bin/bash
#
# Copyright (c) 2014 David Vossel <dvossel@redhat.com>
#					All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#######################################################################

PHD_DOCKER_LIB="@libexecdir@/phd/docker/"
PHD_DOCKER_LOGDIR="@localstatedir@/lib/phd/"

if ! [ -w $PHD_DOCKER_LOGDIR ]; then
       PHD_DOCKER_LOGDIR="$HOME/phd_state"
fi

.  ${PHD_DOCKER_LIB}/phd_docker_utils.sh
.  ${PHD_DOCKER_LIB}/phd_docker_tests.sh

from="centos:centos7"
#from="fedora"
pull=0
reuse=0
prev_image=""
image=""
cts_iterations=""
doc_opts=""
debug_container=0
rpmdir=""
stonith=0
containers="3"
remote_containers="0"

function helptext() {
	echo "pcmk_docker_autogen - A tool for generating pacemaker clusters locally with docker containers."
	echo ""
	echo "Usage: pcmk_docker_autogen.sh [options]"
	echo ""
	echo "Options:"
	echo "-c, --containers         Specify the number of pacemaker containers to generate, defaults to $containers."
	echo "-b, --remote-containers  Specify the number of baremetal remote node containers to generate, defaults to $remote_containers."
	echo "-d, --cleanup-only       Cleanup previous containers only."
	echo "-D, --debug-mode         Launch a container in interactive mode for testing."
	echo "-f, --from               Specify the FROM image to base the docker containers off of. Default is \"$from\""
	echo "-i, --cts-iterations     The number of cts iterations to execute  on the newly created docker containers"
	echo "-o, --repo-copy          Copy the repos in this host directory into the image's /etc/yum.repos.d/ directory"
	echo "-p, --pull               Force pull \"from\" image regardless if it exists or not."
	echo "-r, --reuse-image        Reuse image built from previous cluster if previous image is detected."
	echo "-R, --rpm-copy           Copy rpms in this directory to image for install".
	echo "-s, --stonith-tests      Execute stonith regression tests. Overrides containers option to 1"
	echo ""
	exit $1
}

while true ; do
	case "$1" in
	--help|-h|-\?) helptext 0;;
	-c|--containers) containers="$2"; shift; shift;;
	-b|--remote-containers) remote_containers="$2"; shift; shift;;
	-d|--cleanup-only) prev_cluster_cleanup; exit 0;;
	-D|--debug-mode) debug_container=1; shift;;
	-f|--from) from="$2"; shift; shift;;
	-i|--cts-iterations) cts_iterations="$2"; shift; shift;;
	-o|--repo-copy) repodir=$2; shift; shift;;
	-p|--pull) pull=1; shift;;
	-r|--reuse) reuse=1; shift;;
	-R|--rpm-copy) rpmdir=$2; shift; shift;;
	-s|--stonith-tests) stonith=1; containers=1; shift;;
	"") break;;
	*) 
		echo "unknown option $1"
		helptext 1;;
	esac
done

if [ $stonith -ne 0 ] && [ -n "$cts_iterations" ]; then
	echo "Specify either -s or -i, both can not be run at the same time"
	exit 1
fi

# We have to re-launch docker with tcp ports open.
docker_setup
prev_cluster_cleanup
make_image
launch_containers
launch_remote_containers
if [ $stonith -eq 0 ]; then
	launch_pcmk_all
	launch_pcmk_remote_all
fi

if [ -n "$cts_iterations" ]; then
	launch_cts $cts_iterations
elif [ "$stonith" -ne 0 ]; then
	launch_stonith_tests
elif [ "$remote_containers" -ne 0 ]; then
	integrate_remote_containers
fi
rc=$?

echo "DONE exit code $rc"
exit $rc
